//
// Generated file, do not edit! Created by nedtool 6.0 from message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class NetworkMsg;
/**
 * Class generated from <tt>message.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message NetworkMsg
 * {
 *     int source;
 *     int destination;
 *     int hopCount = 0;
 * }
 * </pre>
 */
class NetworkMsg : public ::omnetpp::cPacket
{
  protected:
    int source = 0;
    int destination = 0;
    int hopCount = 0;
    long numSeq = 0;

  private:
    void copy(const NetworkMsg& other);

  protected:
    bool operator==(const NetworkMsg&) = delete;

  public:
    NetworkMsg(const char *name=nullptr, short kind=0);
    NetworkMsg(const NetworkMsg& other);
    virtual ~NetworkMsg();
    NetworkMsg& operator=(const NetworkMsg& other);
    virtual NetworkMsg *dup() const override {return new NetworkMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual long getNumSeq() const;
    virtual void setNumSeq(long numSeq);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NetworkMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NetworkMsg& obj) {obj.parsimUnpack(b);}

#endif // ifndef __MESSAGE_M_H

